name: ci-ghcr-azure-deploy

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  CONTAINER_PORT: "8080"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Normalize owner and image name
        run: |
          echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV
          echo "IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/azure-docker-apps" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.OWNER_LC }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image to GHCR
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Container Apps
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            az extension add --name containerapp --upgrade -y
            az provider register --namespace Microsoft.App --wait

            RG="${{ secrets.RG_NAME }}"
            ENV_NAME="${{ secrets.ACA_ENV }}"
            APP_NAME="${{ secrets.ACA_NAME }}"
            LOCATION="${{ vars.AZURE_LOCATION }}"
            IMAGE="${{ env.IMAGE_NAME }}:${{ github.sha }}"

            if [ -z "${LOCATION}" ]; then LOCATION="westeurope"; fi

            if ! az containerapp env show -g "$RG" -n "$ENV_NAME" &>/dev/null; then
              az containerapp env create -g "$RG" -n "$ENV_NAME" -l "$LOCATION"
            fi

            if az containerapp show -g "$RG" -n "$APP_NAME" &>/dev/null; then
              az containerapp update \
                -g "$RG" -n "$APP_NAME" \
                --image "$IMAGE" \
                --ingress external --target-port ${{ env.CONTAINER_PORT }} \
                --set-env-vars PORT=${{ env.CONTAINER_PORT }}
            else
              az containerapp create \
                -g "$RG" -n "$APP_NAME" \
                --environment "$ENV_NAME" \
                --image "$IMAGE" \
                --ingress external --target-port ${{ env.CONTAINER_PORT }} \
                --cpu 0.5 --memory 1Gi \
                --set-env-vars PORT=${{ env.CONTAINER_PORT }}
            fi

            az containerapp revision list -g "$RG" -n "$APP_NAME" --query "[?properties.active].{name:name,image:properties.template.containers[0].image}" -o table
